#cmakedefine MARPAESLIF_HAVE_LONG_LONG
#cmakedefine C2CSHARP_TYPE_INT_IS_INT
using System;

namespace org.parser.marpa
{
    public class marpaESLIFRecognizer : IDisposable
    {
        public IntPtr marpaESLIFRecognizerp { get; protected set; }
        private readonly marpaESLIFGrammar marpaESLIFGrammar;
        private readonly bool shallow;
        private readonly marpaESLIFRecognizerOption marpaESLIFRecognizerOption;
        private object Lock = new object();
        private marpaESLIFRecognizer marpaESLIFRecognizerShared;
        private bool disposedValue;

        public marpaESLIFRecognizer(marpaESLIFGrammar marpaESLIFGrammar, marpaESLIFRecognizerOption marpaESLIFRecognizerOption = null)
        {
            this.marpaESLIFGrammar = marpaESLIFGrammar ?? throw new ArgumentNullException(nameof(marpaESLIFGrammar));
            this.marpaESLIFRecognizerOption = marpaESLIFRecognizerOption; // Can be null
            this.marpaESLIFRecognizerp = marpaESLIFShr.marpaESLIFRecognizer_newp(this.marpaESLIFGrammar.marpaESLIFGrammarp, this.marpaESLIFRecognizerOption != null ? this.marpaESLIFRecognizerOption.marpaESLIFRecognizerOptionp: IntPtr.Zero);
            if (this.marpaESLIFRecognizerp == IntPtr.Zero)
            {
                throw new Exception("marpaESLIFRecognizer_newp failure");
            }
        }

        public marpaESLIFRecognizer(marpaESLIFGrammar marpaESLIFGrammar, marpaESLIFRecognizer marpaESLIFRecognizerShared)
        {
            this.marpaESLIFRecognizerShared = marpaESLIFRecognizerShared ?? throw new ArgumentNullException(nameof(marpaESLIFRecognizerShared));
            this.marpaESLIFRecognizerp = marpaESLIFShr.marpaESLIFRecognizer_newFromp(this.marpaESLIFGrammar.marpaESLIFGrammarp, marpaESLIFRecognizerShared.marpaESLIFRecognizerp);
            if (this.marpaESLIFRecognizerp == IntPtr.Zero)
            {
                throw new Exception("marpaESLIFRecognizer_newFromp failure");
            }
        }

        public void SetExhaustedFlag(bool onOff)
        {
            if (marpaESLIFShr.marpaESLIFRecognizer_set_exhausted_flagb(this.marpaESLIFRecognizerp, (@C2CSHARP_TYPE_SHORT@) (onOff ? 1 : 0)) == 0)
            {
                throw new Exception("marpaESLIFRecognizer_set_exhausted_flagb failure");
            }
        }

        public bool IsExhausted()
        {
            @C2CSHARP_TYPE_SHORT@ isExhaustedb = 0;

            if (marpaESLIFShr.marpaESLIFRecognizer_isExhaustedb(this.marpaESLIFRecognizerp, ref isExhaustedb) == 0)
            {
                throw new Exception("marpaESLIFRecognizer_isExhaustedb failure");
            }

            return isExhaustedb != 0;
        }

        public bool IsCanContinue()
        {
            @C2CSHARP_TYPE_SHORT@ isCanContinueb = 0;

            if (marpaESLIFShr.marpaESLIFRecognizer_isCanContinueb(this.marpaESLIFRecognizerp, ref isCanContinueb) == 0)
            {
                throw new Exception("marpaESLIFRecognizer_isCanContinueb failure");
            }

            return isCanContinueb != 0;
        }

        public void Share(marpaESLIFRecognizer marpaESLIFRecognizerShared)
        {
            if (marpaESLIFShr.marpaESLIFRecognizer_shareb(this.marpaESLIFRecognizerp, marpaESLIFRecognizerShared.marpaESLIFRecognizerp) == 0)
            {
                throw new Exception("marpaESLIFRecognizer_shareb failure");
            }
        }

        public void Unshare()
        {
            if (marpaESLIFShr.marpaESLIFRecognizer_shareb(this.marpaESLIFRecognizerp, IntPtr.Zero) == 0)
            {
                throw new Exception("marpaESLIFRecognizer_shareb failure");
            }
        }

        protected virtual void Dispose(bool disposing)
        {
            if (!disposedValue)
            {
                if (disposing)
                {
                    // DONE: dispose managed state (managed objects)
                }

                // DONE: free unmanaged resources (unmanaged objects) and override finalizer
                this.DisposeUnmanagedResources();
                // DONE: set large fields to null
                disposedValue = true;
            }
        }

        // TODO: override finalizer only if 'Dispose(bool disposing)' has code to free unmanaged resources
        ~marpaESLIFRecognizer()
        {
            // Do not change this code. Put cleanup code in 'Dispose(bool disposing)' method
            Dispose(disposing: false);
        }

        public void Dispose()
        {
            // Do not change this code. Put cleanup code in 'Dispose(bool disposing)' method
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        private void DisposeUnmanagedResources()
        {
            if (!this.shallow && this.marpaESLIFRecognizerp != IntPtr.Zero)
            {
                marpaESLIFShr.marpaESLIFRecognizer_freev(this.marpaESLIFRecognizerp);
            }
        }
    }
}

#cmakedefine MARPAESLIF_HAVE_LONG_LONG
#cmakedefine C2CSHARP_TYPE_INT_IS_INT
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace org.parser.marpa
{
    public class marpaESLIFRecognizerOption : IDisposable
    {
        public IntPtr marpaESLIFRecognizerOptionp { get; protected set; }
        public marpaESLIFRecognizerOptionContext context { get; protected set; }
        private readonly marpaESLIFShr.marpaESLIFRecognizerOption_t marpaESLIFRecognizerOption_t;
        private readonly ESLIFRecognizerInterface recognizerInterface;
        private readonly GCHandle contextHandle;
        private readonly IntPtr userDatavp;
        private bool disposedValue;

        public class marpaESLIFRecognizerOptionContext
        {
            public ESLIFRecognizerInterface recognizerInterface;
            public Stack<object> stack = new Stack<object>();

            public marpaESLIFRecognizerOptionContext(ESLIFRecognizerInterface recognizerInterface)
            {
                this.recognizerInterface = recognizerInterface ?? throw new ArgumentNullException(nameof(recognizerInterface));
            }
        }

        public marpaESLIFRecognizerOption(ESLIFRecognizerInterface recognizerInterface)
        {
            this.recognizerInterface = recognizerInterface ?? throw new ArgumentNullException(nameof(recognizerInterface));

            this.context = new marpaESLIFRecognizerOptionContext(recognizerInterface);
            this.contextHandle = GCHandle.Alloc(context, GCHandleType.Normal);
            this.userDatavp = GCHandle.ToIntPtr(this.contextHandle);

            this.marpaESLIFRecognizerOption_t = new marpaESLIFShr.marpaESLIFRecognizerOption_t();
            this.marpaESLIFRecognizerOption_t.userDatavp = userDatavp;
            this.marpaESLIFRecognizerOption_t.readerCallbackp = ReaderCallback;
            this.marpaESLIFRecognizerOption_t.disableThresholdb = (@C2CSHARP_TYPE_SHORT@)(this.recognizerInterface.IsWithDisableThreshold() ? 1 : 0);
            this.marpaESLIFRecognizerOption_t.exhaustedb = (@C2CSHARP_TYPE_SHORT@)(this.recognizerInterface.IsWithExhaustion() ? 1 : 0);
            this.marpaESLIFRecognizerOption_t.newlineb = (@C2CSHARP_TYPE_SHORT@)(this.recognizerInterface.IsWithNewline() ? 1 : 0);
            this.marpaESLIFRecognizerOption_t.trackb = (@C2CSHARP_TYPE_SHORT@)(this.recognizerInterface.IsWithTrack() ? 1 : 0);
            this.marpaESLIFRecognizerOption_t.bufsizl = 0;
            this.marpaESLIFRecognizerOption_t.buftriggerperci = 50;
            this.marpaESLIFRecognizerOption_t.bufaddperci = 50;
            this.marpaESLIFRecognizerOption_t.ifActionResolverp = IfActionResolver;
            this.marpaESLIFRecognizerOption_t.eventActionResolverp = EventActionResolver;
            this.marpaESLIFRecognizerOption_t.regexActionResolverp = RegexActionResolver;
            this.marpaESLIFRecognizerOption_t.generatorActionResolverp = GeneratorActionResolver;
            this.marpaESLIFRecognizerOption_t.importerp = Importer;

            this.marpaESLIFRecognizerOptionp = Marshal.AllocHGlobal(Marshal.SizeOf(this.marpaESLIFRecognizerOption_t));
            Marshal.StructureToPtr(marpaESLIFRecognizerOption_t, this.marpaESLIFRecognizerOptionp, false);
        }

        private static @C2CSHARP_TYPE_SHORT@ Importer(IntPtr marpaESLIFRecognizerp, IntPtr userDatavp, IntPtr marpaESLIFValueResultp, short haveUndefb)
        {
            GCHandle contextHandle = GCHandle.FromIntPtr(userDatavp);
            marpaESLIFRecognizerOptionContext context = (marpaESLIFRecognizerOptionContext)contextHandle.Target;
            if (context == null)
            {
                throw new Exception("context is null");
            }

            ImportExport.Instance.Importer(context.stack, marpaESLIFValueResultp);

            return 1;
        }

        private static marpaESLIFShr.marpaESLIFRecognizerGeneratorCallback_t GeneratorActionResolver(IntPtr userDatavp, IntPtr marpaESLIFRecognizerp, IntPtr actions)
        {
            throw new NotImplementedException();
        }

        private static marpaESLIFShr.marpaESLIFRecognizerRegexCallback_t RegexActionResolver(IntPtr userDatavp, IntPtr marpaESLIFRecognizerp, IntPtr actions)
        {
            throw new NotImplementedException();
        }

        private static marpaESLIFShr.marpaESLIFRecognizerEventCallback_t EventActionResolver(IntPtr userDatavp, IntPtr marpaESLIFRecognizerp, IntPtr actions)
        {
            throw new NotImplementedException();
        }

        private static marpaESLIFShr.marpaESLIFRecognizerIfCallback_t IfActionResolver(IntPtr userDatavp, IntPtr marpaESLIFRecognizerp, IntPtr actions)
        {
            throw new NotImplementedException();
        }

        private static void DisposeCallback(IntPtr userDatavp, IntPtr inputcp, @C2CSHARP_TYPE_SIZE_T@ inputl, @C2CSHARP_TYPE_SHORT@ eofb, @C2CSHARP_TYPE_SHORT@ characterStreamb, IntPtr encodings, @C2CSHARP_TYPE_SIZE_T@ encodingl)
        {
            if (inputcp != IntPtr.Zero)
            {
                Marshal.FreeHGlobal(inputcp);
            }
            if (encodings != IntPtr.Zero)
            {
                Marshal.FreeHGlobal(encodings);
            }
        }

        private static short ReaderCallback(IntPtr userDatavp, ref IntPtr inputcpp, ref @C2CSHARP_TYPE_SIZE_T@ inputlp, ref short eofbp, ref short characterStreambp, ref IntPtr encodingsp, ref @C2CSHARP_TYPE_SIZE_T@ encodinglp, ref marpaESLIFShr.marpaESLIFReaderDispose_t disposeCallbackpp)
        {
            if (userDatavp == IntPtr.Zero)
            {
                throw new ArgumentNullException(nameof(userDatavp));
            }

            GCHandle recognizerInterfaceHandle = GCHandle.FromIntPtr(userDatavp);
            ESLIFRecognizerInterface recognizerInterface = (ESLIFRecognizerInterface)recognizerInterfaceHandle.Target;
            if (recognizerInterface == null)
            {
                throw new Exception("recognizerInterface is null");
            }

            if (! recognizerInterface.Read())
            {
                return 0;
            }

            disposeCallbackpp = DisposeCallback;
            byte[] data = recognizerInterface.Data();
            if (data.Length > 0)
            {
                inputcpp = Marshal.AllocHGlobal(data.Length * sizeof(byte));
                Marshal.Copy(data, 0, inputcpp, data.Length);
                inputlp = (@C2CSHARP_TYPE_SIZE_T@) data.Length;
            }
            else
            {
                inputcpp = IntPtr.Zero;
            }

            eofbp = (@C2CSHARP_TYPE_SHORT@)(recognizerInterface.IsEof() ? 1 : 0);
            characterStreambp = (@C2CSHARP_TYPE_SHORT@)(recognizerInterface.IsCharacterStream() ? 1 : 0);

            string encoding = recognizerInterface.Encoding();
            if (!string.IsNullOrWhiteSpace(encoding))
            {
                byte[] ascii = Encoding.ASCII.GetBytes(encoding);
                encodingsp = Marshal.AllocHGlobal(ascii.Length * sizeof(byte));
                Marshal.Copy(ascii, 0, encodingsp, ascii.Length);
                encodinglp = (@C2CSHARP_TYPE_SIZE_T@) ascii.Length;
            }
            else
            {
                encodingsp = IntPtr.Zero;
            }

            return 1;
        }

        private void DisposeUnmanagedResources()
        {
            if (this.userDatavp != IntPtr.Zero)
            {
                this.contextHandle.Free();
            }

            if (this.marpaESLIFRecognizerOptionp != IntPtr.Zero)
            {
                Marshal.FreeHGlobal(this.marpaESLIFRecognizerOptionp);
                this.marpaESLIFRecognizerOptionp = IntPtr.Zero;
            }
        }

        protected virtual void Dispose(bool disposing)
        {
            if (!disposedValue)
            {
                if (disposing)
                {
                    // DONE: dispose managed state (managed objects)
                }

                // DONE: free unmanaged resources (unmanaged objects) and override finalizer
                this.DisposeUnmanagedResources();
                // DONE: set large fields to null
                disposedValue = true;
            }
        }

        // DONE: override finalizer only if 'Dispose(bool disposing)' has code to free unmanaged resources
        ~marpaESLIFRecognizerOption()
        {
            // Do not change this code. Put cleanup code in 'Dispose(bool disposing)' method
            Dispose(disposing: false);
        }

        public void Dispose()
        {
            // Do not change this code. Put cleanup code in 'Dispose(bool disposing)' method
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }
    }
}

using System;
using System.Runtime.InteropServices;

namespace marpaESLIFCsharp
{
    public class genericLoggershr
    {
        public enum genericLoggerLevel_t
        {
            GENERICLOGGER_LOGLEVEL_TRACE = 0,
            GENERICLOGGER_LOGLEVEL_DEBUG,
            GENERICLOGGER_LOGLEVEL_INFO,
            GENERICLOGGER_LOGLEVEL_NOTICE,
            GENERICLOGGER_LOGLEVEL_WARNING,
            GENERICLOGGER_LOGLEVEL_ERROR,
            GENERICLOGGER_LOGLEVEL_CRITICAL,
            GENERICLOGGER_LOGLEVEL_ALERT,
            GENERICLOGGER_LOGLEVEL_EMERGENCY
        }

        public delegate void genericLoggerCallback_t(IntPtr userDatavp, genericLoggerLevel_t logLeveli, string msgs);

        [DllImport("genericLogger.dll")]
        public static extern string genericLogger_versions();

        [DllImport("genericLogger.dll")]
        public static extern genericLoggerCallback_t genericLogger_defaultLogCallbackp();

        [DllImport("genericLogger.dll")]
        public static extern IntPtr genericLogger_userDatavp_setp(IntPtr genericLoggerp, IntPtr userDatavp);

        [DllImport("genericLogger.dll")]
        public static extern IntPtr genericLogger_userDatavp_getp(IntPtr genericLoggerp);

        [DllImport("genericLogger.dll")]
        public static extern genericLoggerLevel_t genericLogger_logLevel_seti(IntPtr genericLoggerp, genericLoggerLevel_t logLeveli);

        [DllImport("genericLogger.dll")]
        public static extern genericLoggerLevel_t genericLogger_logLevel_geti(IntPtr genericLoggerp);

        [DllImport("genericLogger.dll")]
        public static extern IntPtr genericLogger_newp(genericLoggerCallback_t logCallbackp, IntPtr userDatavp, genericLoggerLevel_t genericLoggerLeveli);

        [DllImport("genericLogger.dll")]
        public static extern IntPtr genericLogger_clonep(IntPtr genericLoggerp);

        [DllImport("genericLogger.dll")]
        public static extern void genericLogger_freev(IntPtr genericLoggerpp);

        // Voluntarilly skipped
        // [DllImport("genericLogger.dll")]
        // public static extern void genericLogger_logv(IntPtr genericLoggerp, genericLoggerLevel_t genericLoggerLeveli, string fmts, __arglist);

        // Voluntarilly skipped
        // [DllImport("genericLogger.dll")]
        // void genericLogger_logapv(genericLogger_t* genericLoggerp, genericLoggerLevel_t genericLoggerLeveli, const char* fmts, va_list ap);
    }
}

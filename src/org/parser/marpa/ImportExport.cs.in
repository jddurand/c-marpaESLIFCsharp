#cmakedefine MARPAESLIF_HAVE_LONG_LONG
#cmakedefine C2CSHARP_TYPE_INT_IS_INT
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;

namespace org.parser.marpa
{
    public class ImportExport : IDisposable
    {
        // Note that we never use value result specific context: with Windows, a GCHandle is enough to:
        // - prevent an object to be garbaged or the contrary
        // - get the underlying value

        private static ImportExport Singleton = null;
        private static readonly object Lock = new object();
        private static IntPtr CSHARP_CONTEXT;
        private static IntPtr CSHARP_CHAR_CONTEXT; // Specific context to distinguish between a char and a string
        private static IntPtr UTF8_STRING;
        private bool disposedValue;

        private ImportExport() {
            CSHARP_CONTEXT = Marshal.StringToHGlobalAnsi("C# string");
            CSHARP_CHAR_CONTEXT = Marshal.StringToHGlobalAnsi("C# char");
            UTF8_STRING = Marshal.StringToHGlobalAnsi("UTF-8");
        }

        public static ImportExport Instance
        {
            get
            {
                lock (Lock)
                {
                    if (Singleton == null)
                    {
                        Singleton = new ImportExport();
                    }
                    return Singleton;
                }
            }
        }

        public IntPtr Exporter(object input)
        {
            // We maintain in parallel stacks of marpaESLIFValueResult_t and objects
            IntPtr marpaESLIFValueResultp = IntPtr.Zero;
            Stack<IntPtr> marpaESLIFValueResultps = new Stack<IntPtr>();
            Stack<object> values = new Stack<object>();

            marpaESLIFValueResultps.Push(Marshal.AllocHGlobal(@SIZEOF_marpaESLIFValueResult_t@));
            values.Push(input);

            while (marpaESLIFValueResultps.Any())
            {
                marpaESLIFValueResultp = marpaESLIFValueResultps.Pop();
                object value = values.Pop();

                bool eslif = false;

                if (value == null)
                {
                    // MARPAESLIF_VALUE_TYPE_UNDEF
                    eslif = this.ExportNull(marpaESLIFValueResultp);
                }
                else
                {
                    Type valueType = value.GetType();
                    if (Object.ReferenceEquals(valueType, typeof(byte)))
                    {
                        // MARPAESLIF_VALUE_TYPE_CHAR
                        // MARPAESLIF_VALUE_TYPE_SHORT
                        // MARPAESLIF_VALUE_TYPE_INT
                        // MARPAESLIF_VALUE_TYPE_LONG
                        // MARPAESLIF_VALUE_TYPE_LONG_LONG
                        eslif = this.ExportNumberNotDecimal(value, marpaESLIFValueResultp, 1);
                    }
                    else if (Object.ReferenceEquals(valueType, typeof(short)))
                    {
                        // MARPAESLIF_VALUE_TYPE_CHAR
                        // MARPAESLIF_VALUE_TYPE_SHORT
                        // MARPAESLIF_VALUE_TYPE_INT
                        // MARPAESLIF_VALUE_TYPE_LONG
                        // MARPAESLIF_VALUE_TYPE_LONG_LONG
                        eslif = this.ExportNumberNotDecimal(value, marpaESLIFValueResultp, 2);
                    }
                    else if (Object.ReferenceEquals(valueType, typeof(int)))
                    {
                        // MARPAESLIF_VALUE_TYPE_CHAR
                        // MARPAESLIF_VALUE_TYPE_SHORT
                        // MARPAESLIF_VALUE_TYPE_INT
                        // MARPAESLIF_VALUE_TYPE_LONG
                        // MARPAESLIF_VALUE_TYPE_LONG_LONG
                        eslif = this.ExportNumberNotDecimal(value, marpaESLIFValueResultp, 4);
                    }
                    else if (Object.ReferenceEquals(valueType, typeof(long)))
                    {
                        // MARPAESLIF_VALUE_TYPE_CHAR
                        // MARPAESLIF_VALUE_TYPE_SHORT
                        // MARPAESLIF_VALUE_TYPE_INT
                        // MARPAESLIF_VALUE_TYPE_LONG
                        // MARPAESLIF_VALUE_TYPE_LONG_LONG
                        eslif = this.ExportNumberNotDecimal(value, marpaESLIFValueResultp, 8);
                    }
                    else if (Object.ReferenceEquals(valueType, typeof(float)))
                    {
                        // MARPAESLIF_VALUE_TYPE_FLOAT
                        // MARPAESLIF_VALUE_TYPE_DOUBLE
                        // MARPAESLIF_VALUE_TYPE_LONG_DOUBLE
                        eslif = this.ExportNumberDecimal(value, marpaESLIFValueResultp, 4);
                    }
                    else if (Object.ReferenceEquals(valueType, typeof(double)))
                    {
                        // MARPAESLIF_VALUE_TYPE_FLOAT
                        // MARPAESLIF_VALUE_TYPE_DOUBLE
                        // MARPAESLIF_VALUE_TYPE_LONG_DOUBLE
                        eslif = this.ExportNumberDecimal(value, marpaESLIFValueResultp, 8);
                    }
                    else if (Object.ReferenceEquals(valueType, typeof(bool)))
                    {
                        // MARPAESLIF_VALUE_TYPE_BOOL
                        eslif = this.ExportBoolean((bool)value, marpaESLIFValueResultp);
                    }
                    else if (Object.ReferenceEquals(valueType, typeof(char)))
                    {
                        // MARPAESLIF_VALUE_TYPE_STRING with a specific CSHARP_CHAR_CONTEXT
                        eslif = this.ExportChar(((char)value).ToString(), marpaESLIFValueResultp);
                    }
                    else if (Object.ReferenceEquals(valueType, typeof(string)))
                    {
                        // MARPAESLIF_VALUE_TYPE_STRING
                        eslif = this.ExportString((string)value, marpaESLIFValueResultp);
                    }
                    else if (valueType.IsArray && typeof(byte) == valueType.GetElementType())
                    {
                        // MARPAESLIF_VALUE_TYPE_ARRAY
                        eslif = this.ExportByteArray((byte[])value, marpaESLIFValueResultp);
                    }
                    else if (Object.ReferenceEquals(valueType, typeof(ExternalPointer)))
                    {
                        // MARPAESLIF_VALUE_TYPE_PTR that we do not own
                        eslif = this.ExportExternalPointer((ExternalPointer)value, marpaESLIFValueResultp);
                    }
                    else if (value is IDictionary iDictionary)
                    {
                        // MARPAESLIF_VALUE_TYPE_TABLE
                        eslif = this.ExportIDictionary(iDictionary, marpaESLIFValueResultp, marpaESLIFValueResultps, values);
                    }
                    else if (value is IEnumerable iEnumerable)
                    {
                        // MARPAESLIF_VALUE_TYPE_ROW
                        eslif = this.ExportIEnumerable(iEnumerable, marpaESLIFValueResultp, marpaESLIFValueResultps, values);
                    }
                }

                if (!eslif)
                {
                    // MARPAESLIF_VALUE_TYPE_PTR that we own
                    GCHandle valueHandle = GCHandle.Alloc(value);

                    marpaESLIF_wrapperShr.marpaESLIFValueResultFlat_t marpaESLIFValueResultFlat_t = new marpaESLIF_wrapperShr.marpaESLIFValueResultFlat_t();

                    marpaESLIFValueResultFlat_t.type = marpaESLIFShr.marpaESLIFValueType_t.MARPAESLIF_VALUE_TYPE_PTR;
                    marpaESLIFValueResultFlat_t.contextp = CSHARP_CONTEXT;
                    marpaESLIFValueResultFlat_t.representationp = Representation;
                    marpaESLIFValueResultFlat_t.p.p = GCHandle.ToIntPtr(valueHandle);
                    marpaESLIFValueResultFlat_t.p.freeCallbackp = FreeCallback;

                    CopymarpaESLIFValueResultFlatToMarpaESLIFValueResult(marpaESLIFValueResultFlat_t, marpaESLIFValueResultp);
                }
            }

            return marpaESLIFValueResultp;
        }

        private bool ExportExternalPointer(ExternalPointer value, IntPtr marpaESLIFValueResultp)
        {
            CopymarpaESLIFValueResultFlatToMarpaESLIFValueResult(value.marpaESLIFValueResultFlat_t, marpaESLIFValueResultp);

            return true;
        }

        private bool ExportIDictionary(IDictionary iDictionary, IntPtr marpaESLIFValueResultp, Stack<IntPtr> marpaESLIFValueResultps, Stack<object> values)
        {
            marpaESLIF_wrapperShr.marpaESLIFValueResultFlat_t marpaESLIFValueResultFlat_t = new marpaESLIF_wrapperShr.marpaESLIFValueResultFlat_t();

            marpaESLIFValueResultFlat_t.type = marpaESLIFShr.marpaESLIFValueType_t.MARPAESLIF_VALUE_TYPE_TABLE;
            marpaESLIFValueResultFlat_t.contextp = CSHARP_CONTEXT;
            marpaESLIFValueResultFlat_t.t.sizel = (@C2CSHARP_TYPE_SIZE_T@)iDictionary.Count;
            marpaESLIFValueResultFlat_t.t.freeCallbackp = FreeCallback;

            if (marpaESLIFValueResultFlat_t.t.sizel > 0)
            {
                marpaESLIFValueResultFlat_t.t.p = Marshal.AllocHGlobal(iDictionary.Count * @SIZEOF_marpaESLIFValueResultPair_t@);
                int i = 0;
                foreach (DictionaryEntry entry in iDictionary)
                {
                    values.Push(entry.Key);
                    marpaESLIFValueResultps.Push(marpaESLIFValueResultFlat_t.t.p + (i * @SIZEOF_marpaESLIFValueResultPair_t@) + @OFFSETOF_marpaESLIFValueResultPair_t_key@);
                    values.Push(entry.Value);
                    marpaESLIFValueResultps.Push(marpaESLIFValueResultFlat_t.t.p + (i++ * @SIZEOF_marpaESLIFValueResultPair_t@) + @OFFSETOF_marpaESLIFValueResultPair_t_value@);
                }
            }
            else
            {
                marpaESLIFValueResultFlat_t.t.p = IntPtr.Zero;
            }

            CopymarpaESLIFValueResultFlatToMarpaESLIFValueResult(marpaESLIFValueResultFlat_t, marpaESLIFValueResultp);

            return true;
        }

        private static void CopymarpaESLIFValueResultFlatToMarpaESLIFValueResult(marpaESLIF_wrapperShr.marpaESLIFValueResultFlat_t marpaESLIFValueResultFlat_t, IntPtr marpaESLIFValueResultp)
        {
            IntPtr marpaESLIFValueResultFlatp = Marshal.AllocHGlobal(Marshal.SizeOf(marpaESLIFValueResultFlat_t));
            Marshal.StructureToPtr(marpaESLIFValueResultFlat_t, marpaESLIFValueResultFlatp, false);
            marpaESLIF_wrapperShr.marpaESLIFValueResultFlatToMarpaESLIFValueResult(marpaESLIFValueResultp, marpaESLIFValueResultFlatp);
            Marshal.FreeHGlobal(marpaESLIFValueResultFlatp);
        }

        private bool ExportNull(IntPtr marpaESLIFValueResultp)
        {
            marpaESLIF_wrapperShr.marpaESLIFValueResultFlat_t marpaESLIFValueResultFlat_t = new marpaESLIF_wrapperShr.marpaESLIFValueResultFlat_t();

            marpaESLIFValueResultFlat_t.type = marpaESLIFShr.marpaESLIFValueType_t.MARPAESLIF_VALUE_TYPE_UNDEF;
            marpaESLIFValueResultFlat_t.contextp = CSHARP_CONTEXT;

            CopymarpaESLIFValueResultFlatToMarpaESLIFValueResult(marpaESLIFValueResultFlat_t, marpaESLIFValueResultp);

            return true;
        }

        private bool ExportIEnumerable(IEnumerable iEnumerable, IntPtr marpaESLIFValueResultp, Stack<IntPtr> marpaESLIFValueResultps, Stack<object> values)
        {
            marpaESLIF_wrapperShr.marpaESLIFValueResultFlat_t marpaESLIFValueResultFlat_t = new marpaESLIF_wrapperShr.marpaESLIFValueResultFlat_t();

            marpaESLIFValueResultFlat_t.type = marpaESLIFShr.marpaESLIFValueType_t.MARPAESLIF_VALUE_TYPE_ROW;
            marpaESLIFValueResultFlat_t.contextp = CSHARP_CONTEXT;
            marpaESLIFValueResultFlat_t.r.sizel = 0;
            marpaESLIFValueResultFlat_t.r.freeCallbackp = FreeCallback;

            int numberOfItems = 0;
            foreach (object item in iEnumerable)
            {
                values.Push(item);
                numberOfItems++;
            }

            if (numberOfItems > 0)
            {
                marpaESLIFValueResultFlat_t.r.sizel = (@C2CSHARP_TYPE_SIZE_T@)numberOfItems;
                marpaESLIFValueResultFlat_t.r.p = Marshal.AllocHGlobal(numberOfItems * @SIZEOF_marpaESLIFValueResult_t@);
                for (int i = 0; i < numberOfItems; i++)
                {
                    marpaESLIFValueResultps.Push(marpaESLIFValueResultFlat_t.r.p + i * @SIZEOF_marpaESLIFValueResult_t@);
                }
            }
            else
            {
                marpaESLIFValueResultFlat_t.r.p = IntPtr.Zero;
            }

            CopymarpaESLIFValueResultFlatToMarpaESLIFValueResult(marpaESLIFValueResultFlat_t, marpaESLIFValueResultp);

            return true;
        }

        private bool ExportByteArray(byte[] bytes, IntPtr marpaESLIFValueResultp)
        {
            marpaESLIF_wrapperShr.marpaESLIFValueResultFlat_t marpaESLIFValueResultFlat_t = new marpaESLIF_wrapperShr.marpaESLIFValueResultFlat_t();

            marpaESLIFValueResultFlat_t.type = marpaESLIFShr.marpaESLIFValueType_t.MARPAESLIF_VALUE_TYPE_ARRAY;
            marpaESLIFValueResultFlat_t.contextp = CSHARP_CONTEXT;
            marpaESLIFValueResultFlat_t.s.sizel = (@C2CSHARP_TYPE_SIZE_T@) bytes.Length;
            if (marpaESLIFValueResultFlat_t.s.sizel > 0)
            {
                marpaESLIFValueResultFlat_t.a.p = Marshal.AllocHGlobal(bytes.Length);
                Marshal.Copy(bytes, 0, marpaESLIFValueResultFlat_t.a.p, bytes.Length);
            }
            else
            {
                marpaESLIFValueResultFlat_t.a.p = IntPtr.Zero;
            }
            marpaESLIFValueResultFlat_t.s.freeCallbackp = FreeCallback;

            CopymarpaESLIFValueResultFlatToMarpaESLIFValueResult(marpaESLIFValueResultFlat_t, marpaESLIFValueResultp);

            return true;
        }

        private bool ExportChar(string value, IntPtr marpaESLIFValueResultp)
        {
            marpaESLIF_wrapperShr.marpaESLIFValueResultFlat_t marpaESLIFValueResultFlat_t = new marpaESLIF_wrapperShr.marpaESLIFValueResultFlat_t();

            byte[] bytes = Encoding.UTF8.GetBytes(value);
            byte[] bytesWithNul = new byte[bytes.Length + 1];
            Buffer.BlockCopy(bytes, 0, bytesWithNul, 0, bytes.Length);
            bytesWithNul[bytes.Length] = 0;
            IntPtr p = Marshal.AllocHGlobal(bytesWithNul.Length);
            Marshal.Copy(bytesWithNul, 0, p, bytesWithNul.Length);

            marpaESLIFValueResultFlat_t.type = marpaESLIFShr.marpaESLIFValueType_t.MARPAESLIF_VALUE_TYPE_STRING;
            marpaESLIFValueResultFlat_t.contextp = CSHARP_CHAR_CONTEXT;
            marpaESLIFValueResultFlat_t.s.p = p;
            marpaESLIFValueResultFlat_t.s.sizel = (@C2CSHARP_TYPE_SIZE_T@) bytes.Length;
            marpaESLIFValueResultFlat_t.s.encodingasciis = UTF8_STRING;
            marpaESLIFValueResultFlat_t.s.freeCallbackp = FreeCallback;

            CopymarpaESLIFValueResultFlatToMarpaESLIFValueResult(marpaESLIFValueResultFlat_t, marpaESLIFValueResultp);

            return true;
        }

        private bool ExportString(string value, IntPtr marpaESLIFValueResultp)
        {
            marpaESLIF_wrapperShr.marpaESLIFValueResultFlat_t marpaESLIFValueResultFlat_t = new marpaESLIF_wrapperShr.marpaESLIFValueResultFlat_t();

            byte[] bytes = Encoding.UTF8.GetBytes(value);
            byte[] bytesWithNul = new byte[bytes.Length + 1];
            Buffer.BlockCopy(bytes, 0, bytesWithNul, 0, bytes.Length);
            bytesWithNul[bytes.Length] = 0;
            IntPtr p = Marshal.AllocHGlobal(bytesWithNul.Length);
            Marshal.Copy(bytesWithNul, 0, p, bytesWithNul.Length);

            marpaESLIFValueResultFlat_t.type = marpaESLIFShr.marpaESLIFValueType_t.MARPAESLIF_VALUE_TYPE_STRING;
            marpaESLIFValueResultFlat_t.contextp = CSHARP_CONTEXT;
            marpaESLIFValueResultFlat_t.s.p = p;
            marpaESLIFValueResultFlat_t.s.sizel = (@C2CSHARP_TYPE_SIZE_T@) bytes.Length;
            marpaESLIFValueResultFlat_t.s.encodingasciis = UTF8_STRING;
            marpaESLIFValueResultFlat_t.s.freeCallbackp = FreeCallback;

            CopymarpaESLIFValueResultFlatToMarpaESLIFValueResult(marpaESLIFValueResultFlat_t, marpaESLIFValueResultp);

            return true;
        }

        private bool ExportBoolean(bool value, IntPtr marpaESLIFValueResultp)
        {
            marpaESLIF_wrapperShr.marpaESLIFValueResultFlat_t marpaESLIFValueResultFlat_t = new marpaESLIF_wrapperShr.marpaESLIFValueResultFlat_t();

            marpaESLIFValueResultFlat_t.type = marpaESLIFShr.marpaESLIFValueType_t.MARPAESLIF_VALUE_TYPE_BOOL;
            marpaESLIFValueResultFlat_t.contextp = CSHARP_CONTEXT;
            marpaESLIFValueResultFlat_t.y = (value == false) ? marpaESLIFShr.marpaESLIFValueResultBool_t.MARPAESLIFVALUERESULTBOOL_FALSE : marpaESLIFShr.marpaESLIFValueResultBool_t.MARPAESLIFVALUERESULTBOOL_TRUE;

            CopymarpaESLIFValueResultFlatToMarpaESLIFValueResult(marpaESLIFValueResultFlat_t, marpaESLIFValueResultp);

            return true;
        }

        private bool ExportNumberNotDecimal(object value, IntPtr marpaESLIFValueResultp, int sizeof_in_csharp)
        {
            marpaESLIF_wrapperShr.marpaESLIFValueResultFlat_t marpaESLIFValueResultFlat_t = new marpaESLIF_wrapperShr.marpaESLIFValueResultFlat_t();
            bool eslif = false;

            if (sizeof_in_csharp <= @SIZEOF_CHAR@) {
                marpaESLIFValueResultFlat_t.type = marpaESLIFShr.marpaESLIFValueType_t.MARPAESLIF_VALUE_TYPE_CHAR;
                marpaESLIFValueResultFlat_t.contextp = CSHARP_CONTEXT;
                marpaESLIFValueResultFlat_t.c = (@C2CSHARP_TYPE_CHAR@)value;
                eslif = true;
            }
            else if (sizeof_in_csharp <= @SIZEOF_SHORT@)
            {
                marpaESLIFValueResultFlat_t.type = marpaESLIFShr.marpaESLIFValueType_t.MARPAESLIF_VALUE_TYPE_SHORT;
                marpaESLIFValueResultFlat_t.contextp = CSHARP_CONTEXT;
                marpaESLIFValueResultFlat_t.b = (@C2CSHARP_TYPE_SHORT@)value;
                eslif = true;
            }
            else if (sizeof_in_csharp <= @SIZEOF_INT@)
            {
                marpaESLIFValueResultFlat_t.type = marpaESLIFShr.marpaESLIFValueType_t.MARPAESLIF_VALUE_TYPE_INT;
                marpaESLIFValueResultFlat_t.contextp = CSHARP_CONTEXT;
                marpaESLIFValueResultFlat_t.i = (@C2CSHARP_TYPE_INT@)value;
                eslif = true;
            }
            else if (sizeof_in_csharp <= @SIZEOF_LONG@)
            {
                marpaESLIFValueResultFlat_t.type = marpaESLIFShr.marpaESLIFValueType_t.MARPAESLIF_VALUE_TYPE_LONG;
                marpaESLIFValueResultFlat_t.contextp = CSHARP_CONTEXT;
                marpaESLIFValueResultFlat_t.l = (@C2CSHARP_TYPE_LONG@)value;
                eslif = true;
            }
#if MARPAESLIF_HAVE_LONG_LONG
            else if (sizeof_in_csharp <= @SIZEOF_LONG_LONG@)
            {
                marpaESLIFValueResultFlat_t.type = marpaESLIFShr.marpaESLIFValueType_t.MARPAESLIF_VALUE_TYPE_LONG_LONG;
                marpaESLIFValueResultFlat_t.contextp = CSHARP_CONTEXT;
                marpaESLIFValueResultFlat_t.ll = (@C2CSHARP_TYPE_LONG_LONG@)value;
                eslif = true;
            }
#endif

            CopymarpaESLIFValueResultFlatToMarpaESLIFValueResult(marpaESLIFValueResultFlat_t, marpaESLIFValueResultp);

            return eslif;
        }

        private bool ExportNumberDecimal(object value, IntPtr marpaESLIFValueResultp, int sizeof_in_csharp)
        {
            marpaESLIF_wrapperShr.marpaESLIFValueResultFlat_t marpaESLIFValueResultFlat_t = new marpaESLIF_wrapperShr.marpaESLIFValueResultFlat_t();
            bool eslif = false;

            if (sizeof_in_csharp <= @SIZEOF_FLOAT@) {
                marpaESLIFValueResultFlat_t.type = marpaESLIFShr.marpaESLIFValueType_t.MARPAESLIF_VALUE_TYPE_FLOAT;
                marpaESLIFValueResultFlat_t.contextp = CSHARP_CONTEXT;
                marpaESLIFValueResultFlat_t.f = (@C2CSHARP_TYPE_FLOAT@)value;
                eslif = true;
            }
            else if (sizeof_in_csharp <= @SIZEOF_DOUBLE@)
            {
                marpaESLIFValueResultFlat_t.type = marpaESLIFShr.marpaESLIFValueType_t.MARPAESLIF_VALUE_TYPE_DOUBLE;
                marpaESLIFValueResultFlat_t.contextp = CSHARP_CONTEXT;
                marpaESLIFValueResultFlat_t.d = (@C2CSHARP_TYPE_DOUBLE@)value;
                eslif = true;
            }
            else if (sizeof_in_csharp <= @SIZEOF_LONG_DOUBLE@)
            {
                marpaESLIFValueResultFlat_t.type = marpaESLIFShr.marpaESLIFValueType_t.MARPAESLIF_VALUE_TYPE_LONG_DOUBLE;
                marpaESLIFValueResultFlat_t.contextp = CSHARP_CONTEXT;
                marpaESLIFValueResultFlat_t.ld = (@C2CSHARP_TYPE_LONG_DOUBLE@)value;
                eslif = true;
            }

            CopymarpaESLIFValueResultFlatToMarpaESLIFValueResult(marpaESLIFValueResultFlat_t, marpaESLIFValueResultp);

            return eslif;
        }

        private static void FreeCallback(IntPtr userDatavp, IntPtr marpaESLIFValueResultp)
        {
            IntPtr marpaESLIFValueResultFlatp = marpaESLIF_wrapperShr.marpaESLIFValueResultConvertp(marpaESLIFValueResultp);
            marpaESLIF_wrapperShr.marpaESLIFValueResultFlat_t marpaESLIFValueResultFlat_t = new marpaESLIF_wrapperShr.marpaESLIFValueResultFlat_t();
            Marshal.PtrToStructure<marpaESLIF_wrapperShr.marpaESLIFValueResultFlat_t>(marpaESLIFValueResultFlatp, marpaESLIFValueResultFlat_t);
            marpaESLIF_wrapperShr.marpaESLIF_free(marpaESLIFValueResultFlatp);

            switch (marpaESLIFValueResultFlat_t.type)
            {
                case marpaESLIFShr.marpaESLIFValueType_t.MARPAESLIF_VALUE_TYPE_PTR:
                    if (marpaESLIFValueResultFlat_t.p.p != IntPtr.Zero)
                    {
                        GCHandle.FromIntPtr(marpaESLIFValueResultFlat_t.p.p).Free();
                    }
                    break;
                case marpaESLIFShr.marpaESLIFValueType_t.MARPAESLIF_VALUE_TYPE_STRING:
                    if (marpaESLIFValueResultFlat_t.s.p != IntPtr.Zero)
                    {
                        GCHandle.FromIntPtr(marpaESLIFValueResultFlat_t.s.p).Free();
                    }
                    if (marpaESLIFValueResultFlat_t.s.encodingasciis != IntPtr.Zero && marpaESLIFValueResultFlat_t.s.encodingasciis != UTF8_STRING)
                    {
                        GCHandle.FromIntPtr(marpaESLIFValueResultFlat_t.s.encodingasciis).Free();
                    }
                    break;
            }
        }

        private static short Representation(IntPtr userDatavp, IntPtr marpaESLIFValueResultp, ref IntPtr inputcpp, ref @C2CSHARP_TYPE_SIZE_T@ inputlp, ref IntPtr encodingasciisp, ref marpaESLIFShr.marpaESLIFRepresentationDispose_t disposeCallbackpp, ref @C2CSHARP_TYPE_SHORT@ stringbp)
        {
            IntPtr marpaESLIFValueResultFlatp = marpaESLIF_wrapperShr.marpaESLIFValueResultConvertp(marpaESLIFValueResultp);
            marpaESLIF_wrapperShr.marpaESLIFValueResultFlat_t marpaESLIFValueResultFlat_t = new marpaESLIF_wrapperShr.marpaESLIFValueResultFlat_t();
            Marshal.PtrToStructure<marpaESLIF_wrapperShr.marpaESLIFValueResultFlat_t>(marpaESLIFValueResultFlatp, marpaESLIFValueResultFlat_t);
            marpaESLIF_wrapperShr.marpaESLIF_free(marpaESLIFValueResultFlatp);

            // We support only the PTR type
            if (marpaESLIFValueResultFlat_t.type != marpaESLIFShr.marpaESLIFValueType_t.MARPAESLIF_VALUE_TYPE_PTR)
            {
                throw new ESLIFException($"Unsupported type {marpaESLIFValueResultFlat_t.type}");
            }

            // If called on a decimal, use the R modifier to loose as little as possible
            GCHandle handle = GCHandle.FromIntPtr(marpaESLIFValueResultFlat_t.p.p);
            byte[] bytes;
            if (Object.ReferenceEquals(handle.Target.GetType(), typeof(decimal)))
            {
                bytes = Encoding.UTF8.GetBytes(((decimal)handle.Target).ToString("R"));
            }
            else
            {
                bytes = Encoding.UTF8.GetBytes($"{handle.Target}");
            }

            if (bytes.Length > 0)
            {
                inputcpp = Marshal.AllocHGlobal(bytes.Length);
                Marshal.Copy(bytes, 0, inputcpp, bytes.Length);
                inputlp = (uint)bytes.Length;
                encodingasciisp = UTF8_STRING;
                disposeCallbackpp = RepresentationDispose;
                stringbp = 1;
            }

            return 1;
        }

        private static void RepresentationDispose(IntPtr userDatavp, IntPtr inputcp, @C2CSHARP_TYPE_SIZE_T@ inputl, IntPtr encodingasciis)
        {
            if (inputcp != IntPtr.Zero)
            {
                Marshal.FreeHGlobal(inputcp);
            }
        }

        public void Importer(Stack<object> stack, IntPtr marpaESLIFValueResultp)
        {
            IntPtr marpaESLIFValueResultFlatp = marpaESLIF_wrapperShr.marpaESLIFValueResultConvertp(marpaESLIFValueResultp);
            marpaESLIF_wrapperShr.marpaESLIFValueResultFlat_t marpaESLIFValueResultFlat_t = new marpaESLIF_wrapperShr.marpaESLIFValueResultFlat_t();
            Marshal.PtrToStructure<marpaESLIF_wrapperShr.marpaESLIFValueResultFlat_t>(marpaESLIFValueResultFlatp, marpaESLIFValueResultFlat_t);
            marpaESLIF_wrapperShr.marpaESLIF_free(marpaESLIFValueResultFlatp);

            /*
              Note that we take advantage that we KNOW WE HAVE BEEN COMPILED ON WINDOWS. This mean that we KNOW that:
              C.f. https://learn.microsoft.com/fr-fr/cpp/cpp/data-type-ranges?view=msvc-170
                   https://learn.microsoft.com/fr-fr/dotnet/csharp/language-reference/builtin-types/floating-point-numeric-types
              C.f. https://learn.microsoft.com/fr-fr/dotnet/csharp/language-reference/builtin-types/integral-numeric-types

              This mapping is indeed what we discover by inspecting the marpaESLIFValueResult structure when producing marpaESLIF_wrapper.

              marpaESLIF Type                    C type    C nb_bits      C# Type

              MARPAESLIF_VALUE_TYPE_UNDEF                                 null
              MARPAESLIF_VALUE_TYPE_CHAR         char      CHAR_BIT       char           Note: In C on windows, char  == __int8   => C# char
              MARPAESLIF_VALUE_TYPE_SHORT        short     >= 16          short          Note: In C on windows, short == __int16  => C# short
              MARPAESLIF_VALUE_TYPE_INT          int       >= 16          int            Note: In C on Windows, int   == __int32  => C# int
              MARPAESLIF_VALUE_TYPE_LONG         long      >= 32          int            Note: In C on Windows, long  == __int32  => C# int
              MARPAESLIF_VALUE_TYPE_FLOAT        float     depends        float          Note: In C on Windows, float in 4 bytes  => C# float
              MARPAESLIF_VALUE_TYPE_DOUBLE       double    depends        double         Note: In C on Windows, double in 8 bytes  => C# double
              MARPAESLIF_VALUE_TYPE_PTR          char*                    Handle on an object if context is CSHARP_CONTEXT
              MARPAESLIF_VALUE_TYPE_ARRAY                                 char[]
              MARPAESLIF_VALUE_TYPE_BOOL                                  bool
              MARPAESLIF_VALUE_TYPE_STRING                                string
              MARPAESLIF_VALUE_TYPE_ROW                                   object[]
              MARPAESLIF_VALUE_TYPE_TABLE                                 Dictionary<object,object>
              MARPAESLIF_VALUE_TYPE_LONG_DOUBLE                           double         Note: In C on Windows, long double is a double
              MARPAESLIF_VALUE_TYPE_LONG_LONG    long long >= 64          long           Note: In C on Windows, long long   == __int64 => C# long

            */

            switch (marpaESLIFValueResultFlat_t.type)
            {
                case marpaESLIFShr.marpaESLIFValueType_t.MARPAESLIF_VALUE_TYPE_UNDEF:
                    stack.Push(null);
                    break;
                case marpaESLIFShr.marpaESLIFValueType_t.MARPAESLIF_VALUE_TYPE_CHAR:
                    stack.Push(marpaESLIFValueResultFlat_t.c);
                    break;
                case marpaESLIFShr.marpaESLIFValueType_t.MARPAESLIF_VALUE_TYPE_SHORT:
                    stack.Push(marpaESLIFValueResultFlat_t.b);
                    break;
                case marpaESLIFShr.marpaESLIFValueType_t.MARPAESLIF_VALUE_TYPE_INT:
                    stack.Push(marpaESLIFValueResultFlat_t.i);
                    break;
                case marpaESLIFShr.marpaESLIFValueType_t.MARPAESLIF_VALUE_TYPE_LONG:
                    stack.Push(marpaESLIFValueResultFlat_t.l);
                    break;
                case marpaESLIFShr.marpaESLIFValueType_t.MARPAESLIF_VALUE_TYPE_FLOAT:
                    stack.Push(marpaESLIFValueResultFlat_t.f);
                    break;
                case marpaESLIFShr.marpaESLIFValueType_t.MARPAESLIF_VALUE_TYPE_DOUBLE:
                    stack.Push(marpaESLIFValueResultFlat_t.d);
                    break;
                case marpaESLIFShr.marpaESLIFValueType_t.MARPAESLIF_VALUE_TYPE_PTR:
                    if (marpaESLIFValueResultFlat_t.contextp == CSHARP_CONTEXT)
                    {
                        // A pointer to an object that we own
                        GCHandle gcHandle = GCHandle.FromIntPtr(marpaESLIFValueResultFlat_t.p.p);
                        stack.Push(gcHandle.Target);
                    }
                    else
                    {
                        // A pointer to an external object
                        stack.Push(new ExternalPointer { marpaESLIFValueResultFlat_t = marpaESLIFValueResultFlat_t });
                    }
                    break;
                case marpaESLIFShr.marpaESLIFValueType_t.MARPAESLIF_VALUE_TYPE_ARRAY:
                    byte[] bytes = new byte[marpaESLIFValueResultFlat_t.a.sizel];
                    if (marpaESLIFValueResultFlat_t.a.sizel > 0)
                    {
                        Marshal.Copy(marpaESLIFValueResultFlat_t.a.p, bytes, 0, bytes.Length);
                    }
                    stack.Push(bytes);
                    break;
                case marpaESLIFShr.marpaESLIFValueType_t.MARPAESLIF_VALUE_TYPE_BOOL:
                    stack.Push(marpaESLIFValueResultFlat_t.b != 0 ? true : false);
                    break;
                case marpaESLIFShr.marpaESLIFValueType_t.MARPAESLIF_VALUE_TYPE_STRING:
                    string stringValue = marpaESLIFString.BytesToString(marpaESLIFValueResultFlat_t.s.p, marpaESLIFValueResultFlat_t.s.sizel, marpaESLIFValueResultFlat_t.s.encodingasciis);
                    // Special to C#
                    if (marpaESLIFValueResultFlat_t.contextp == CSHARP_CHAR_CONTEXT)
                    {
                        stack.Push(stringValue[0]);
                    }
                    else
                    {
                        stack.Push(stringValue);
                    }
                    break;
                case marpaESLIFShr.marpaESLIFValueType_t.MARPAESLIF_VALUE_TYPE_ROW:
                    /* We received elements in order: first, second, etc..., we pushed that in stack, so pop will say last, beforelast, etc..., second, first */
                    if (marpaESLIFValueResultFlat_t.r.sizel <= 0)
                    {
                        stack.Push(new object[0]);
                    }
                    else
                    {
                        int j = (int)marpaESLIFValueResultFlat_t.r.sizel - 1;
                        object[] objects = new object[j];
                        for (int i = 0; i < marpaESLIFValueResultFlat_t.r.sizel; i++, j--)
                        {
                            objects[j] = stack.Pop();
                        }
                        stack.Push(objects);
                    }
                    break;
                case marpaESLIFShr.marpaESLIFValueType_t.MARPAESLIF_VALUE_TYPE_TABLE:
                    /* We received elements in order: first, second, etc..., we pushed that in stack, so pop will say last, beforelast, etc..., second, first */
                    if (marpaESLIFValueResultFlat_t.t.sizel <= 0)
                    {
                        stack.Push(new Dictionary<object, object>());
                    }
                    else
                    {
                        Dictionary<object, object> dict = new Dictionary<object, object>();
                        for (int i = 0; i < marpaESLIFValueResultFlat_t.t.sizel; i++)
                        {
                            object value = stack.Pop();
                            object key = stack.Pop();
                            dict.Add(key, value);
                        }
                        stack.Push(dict);
                    }
                    break;
                case marpaESLIFShr.marpaESLIFValueType_t.MARPAESLIF_VALUE_TYPE_LONG_DOUBLE:
                    stack.Push(marpaESLIFValueResultFlat_t.ld);
                    break;
#if MARPAESLIF_HAVE_LONG_LONG
                case marpaESLIFShr.marpaESLIFValueType_t.MARPAESLIF_VALUE_TYPE_LONG_LONG:
                    stack.Push(marpaESLIFValueResultFlat_t.ll);
                    break;
#endif
                default:
                    throw new ESLIFException($"Unsupported value result type {(int)marpaESLIFValueResultFlat_t.type}");
            }
        }

        private void DisposeUnamangedResources()
        {
            Marshal.FreeHGlobal(CSHARP_CONTEXT);
            Marshal.FreeHGlobal(CSHARP_CHAR_CONTEXT);
            Marshal.FreeHGlobal(UTF8_STRING);
        }

        protected virtual void Dispose(bool disposing)
        {
            if (!disposedValue)
            {
                if (disposing)
                {
                    // DONE: dispose managed state (managed objects)
                }

                // DONE: free unmanaged resources (unmanaged objects) and override finalizer
                this.DisposeUnamangedResources();
                // DONE: set large fields to null
                disposedValue = true;
            }
        }

        // TODO: override finalizer only if 'Dispose(bool disposing)' has code to free unmanaged resources
        ~ImportExport()
        {
            // Do not change this code. Put cleanup code in 'Dispose(bool disposing)' method
            Dispose(disposing: false);
        }

        public void Dispose()
        {
            // Do not change this code. Put cleanup code in 'Dispose(bool disposing)' method
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        internal class ExternalPointer
        {
            public marpaESLIF_wrapperShr.marpaESLIFValueResultFlat_t marpaESLIFValueResultFlat_t;

            public override string ToString()
            {
                // By definition this is a pointer
                return $"{this.marpaESLIFValueResultFlat_t.p.p}";
            }
        }
    }
}

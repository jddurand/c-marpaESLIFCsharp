using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;

namespace org.parser.marpa
{
    public class marpaESLIFRecognizerOption : IDisposable
    {
        public IntPtr marpaESLIFRecognizerOptionp { get; protected set; }
        public marpaESLIFRecognizerOptionContext context { get; protected set; }
        private readonly marpaESLIFShr.marpaESLIFRecognizerOption_t marpaESLIFRecognizerOption_t;
        private readonly ESLIFRecognizerInterface recognizerInterface;
        private readonly GCHandle contextHandle;
        private readonly IntPtr userDatavp;
        private bool disposedValue;

        public class marpaESLIFRecognizerOptionContext
        {
            public ESLIFRecognizerInterface recognizerInterface;
            public string action;
            public Stack<object> stack = new Stack<object>();

            public marpaESLIFRecognizerOptionContext(ESLIFRecognizerInterface recognizerInterface)
            {
                this.recognizerInterface = recognizerInterface ?? throw new ArgumentNullException(nameof(recognizerInterface));
            }
        }

        public marpaESLIFRecognizerOption(ESLIFRecognizerInterface recognizerInterface)
        {
            this.recognizerInterface = recognizerInterface ?? throw new ArgumentNullException(nameof(recognizerInterface));

            this.context = new marpaESLIFRecognizerOptionContext(recognizerInterface);
            this.contextHandle = GCHandle.Alloc(context, GCHandleType.Normal);
            this.userDatavp = GCHandle.ToIntPtr(this.contextHandle);

            this.marpaESLIFRecognizerOption_t = new marpaESLIFShr.marpaESLIFRecognizerOption_t();
            this.marpaESLIFRecognizerOption_t.userDatavp = userDatavp;
            this.marpaESLIFRecognizerOption_t.readerCallbackp = ReaderCallback;
            this.marpaESLIFRecognizerOption_t.disableThresholdb = (@C2CSHARP_TYPE_SHORT@)(this.recognizerInterface.IsWithDisableThreshold() ? 1 : 0);
            this.marpaESLIFRecognizerOption_t.exhaustedb = (@C2CSHARP_TYPE_SHORT@)(this.recognizerInterface.IsWithExhaustion() ? 1 : 0);
            this.marpaESLIFRecognizerOption_t.newlineb = (@C2CSHARP_TYPE_SHORT@)(this.recognizerInterface.IsWithNewline() ? 1 : 0);
            this.marpaESLIFRecognizerOption_t.trackb = (@C2CSHARP_TYPE_SHORT@)(this.recognizerInterface.IsWithTrack() ? 1 : 0);
            this.marpaESLIFRecognizerOption_t.bufsizl = 0;
            this.marpaESLIFRecognizerOption_t.buftriggerperci = 50;
            this.marpaESLIFRecognizerOption_t.bufaddperci = 50;
            this.marpaESLIFRecognizerOption_t.ifActionResolverp = IfActionResolver;
            this.marpaESLIFRecognizerOption_t.eventActionResolverp = EventActionResolver;
            this.marpaESLIFRecognizerOption_t.regexActionResolverp = RegexActionResolver;
            this.marpaESLIFRecognizerOption_t.generatorActionResolverp = GeneratorActionResolver;
            this.marpaESLIFRecognizerOption_t.importerp = Importer;

            this.marpaESLIFRecognizerOptionp = Marshal.AllocHGlobal(Marshal.SizeOf(this.marpaESLIFRecognizerOption_t));
            Marshal.StructureToPtr(marpaESLIFRecognizerOption_t, this.marpaESLIFRecognizerOptionp, false);
        }

        private static marpaESLIFRecognizerOptionContext GetContext(IntPtr userDatavp)
        {
            GCHandle contextHandle = GCHandle.FromIntPtr(userDatavp);
            marpaESLIFRecognizerOptionContext context = (marpaESLIFRecognizerOptionContext)contextHandle.Target;
            if (context == null)
            {
                throw new ESLIFException("context is null");
            }

            return context;
        }

        private static object GetObject(Stack<object> stack, IntPtr marpaESLIFRecognizerp, IntPtr marpaESLIFValueResultp)
        {
            if (marpaESLIFShr.marpaESLIFRecognizer_importb(marpaESLIFRecognizerp, marpaESLIFValueResultp) == 0)
            {
                throw new ESLIFException("marpaESLIFRecognizer_importb failure");
            }
            if (stack.Count != 1)
            {
                throw new ESLIFException($"Internal value stack is {stack.Count} instead of 1");
            }

            return stack.Pop();
        }

        private static @C2CSHARP_TYPE_SHORT@ Importer(IntPtr marpaESLIFRecognizerp, IntPtr userDatavp, IntPtr marpaESLIFValueResultp, short haveUndefb)
        {
            marpaESLIFRecognizerOptionContext context = GetContext(userDatavp);
            ImportExport.Instance.Importer(context.stack, marpaESLIFValueResultp);

            return 1;
        }

        private static string GeneratorCallback(marpaESLIFRecognizerOptionContext context, object[] args)
        {
            // We do not support the same method with multiple definitions
            MethodInfo methodInfo = context.recognizerInterface.GetType().GetMethod(context.action) ?? throw new ESLIFException($"{context.action} is not supported.");
            // We let C# deal with variance
            string actionResult;
            try
            {
                actionResult = methodInfo.Invoke(context.recognizerInterface, args) as string;
            }
            catch (Exception e)
            {
                throw new ESLIFException($"{context.action} failure", e);
            }

            return actionResult;
        }

        private static @C2CSHARP_TYPE_SHORT@ marpaESLIFRecognizerGeneratorCallback(IntPtr userDatavp, IntPtr marpaESLIFRecognizerp, IntPtr contextp, IntPtr marpaESLIFValueResultOutp)
        {
            marpaESLIFRecognizerOptionContext context = GetContext(userDatavp);
            object input = GetObject(context.stack, marpaESLIFRecognizerp, contextp);
            string actionResult = GeneratorCallback(context, new object[] { input });

            ImportExport.Instance.ExportStringtoMarpaEslifValueResultString(actionResult, marpaESLIFValueResultOutp);

            return 1;
        }

        private static marpaESLIFShr.marpaESLIFRecognizerGeneratorCallback_t GeneratorActionResolver(IntPtr userDatavp, IntPtr marpaESLIFRecognizerp, IntPtr actions)
        {
            GetContext(userDatavp).action = Marshal.PtrToStringAnsi(actions);

            return marpaESLIFRecognizerGeneratorCallback;
        }

        private static @C2CSHARP_TYPE_INT@ RegexCallback(marpaESLIFRecognizerOptionContext context, object[] args)
        {
            // We do not support the same method with multiple definitions
            MethodInfo methodInfo = context.recognizerInterface.GetType().GetMethod(context.action) ?? throw new ESLIFException($"{context.action} is not supported.");
            // We let C# deal with variance
            object output;
            try
            {
                output = methodInfo.Invoke(context.recognizerInterface, args);
            }
            catch (Exception e)
            {
                throw new ESLIFException($"{context.action} failure", e);
            }

            return (@C2CSHARP_TYPE_INT@) output;
        }

        private static @C2CSHARP_TYPE_SHORT@ marpaESLIFRecognizerRegexCallback(IntPtr userDatavp, IntPtr marpaESLIFRecognizerp, IntPtr marpaESLIFCalloutBlockp, ref @C2CSHARP_TYPE_INT@ marpaESLIFValueResultOutp)
        {
            marpaESLIFRecognizerOptionContext context = GetContext(userDatavp);
            object input = GetObject(context.stack, marpaESLIFRecognizerp, marpaESLIFCalloutBlockp);
            Dictionary<object, object> dict = input as Dictionary<object, object>;
            ESLIFRegexCallout callout = new ESLIFRegexCallout();

            if (dict.TryGetValue("callout_number", out object callout_number) && callout_number != null)
            {
                callout.callout_number = (int)callout_number;
            }
            if (dict.TryGetValue("callout_string", out object callout_string) && callout_string != null)
            {
                callout.callout_string = Encoding.UTF8.GetString((byte[]) callout_string);
            }
            if (dict.TryGetValue("subject", out object subject))
            {
                callout.subject = (byte[])subject;
            }
            if (dict.TryGetValue("pattern", out object pattern))
            {
                callout.pattern = (byte[])pattern;
            }
            if (dict.TryGetValue("capture_top", out object capture_top))
            {
                callout.capture_top = (int)capture_top;
            }
            if (dict.TryGetValue("capture_last", out object capture_last))
            {
                callout.capture_last = (int)capture_last;
            }
            if (dict.TryGetValue("offset_vector", out object offset_vector))
            {
                callout.offset_vector = (offset_vector as object[])?.Select(o => (int)o).ToArray();
            }
            if (dict.TryGetValue("mark", out object mark) && mark != null)
            {
                callout.mark = (int)mark;
            }
            if (dict.TryGetValue("start_match", out object start_match))
            {
                callout.start_match = (int)start_match;
            }
            if (dict.TryGetValue("current_position", out object current_position))
            {
                callout.current_position = (int)current_position;
            }
            if (dict.TryGetValue("next_item", out object next_item))
            {
                callout.next_item = (byte[])next_item;
            }
            if (dict.TryGetValue("grammar_level", out object grammar_level))
            {
                callout.grammar_level = (int)grammar_level;
            }
            if (dict.TryGetValue("symbol_id", out object symbol_id))
            {
                callout.symbol_id = (int)symbol_id;
            }

            marpaESLIFValueResultOutp = RegexCallback(context, new object[] { callout });

            return 1;
        }

        private static marpaESLIFShr.marpaESLIFRecognizerRegexCallback_t RegexActionResolver(IntPtr userDatavp, IntPtr marpaESLIFRecognizerp, IntPtr actions)
        {
            GetContext(userDatavp).action = Marshal.PtrToStringAnsi(actions);

            return marpaESLIFRecognizerRegexCallback;
        }

        private static void EventCallback(marpaESLIFRecognizerOptionContext context, object[] args)
        {
            // We do not support the same method with multiple definitions
            MethodInfo methodInfo = context.recognizerInterface.GetType().GetMethod(context.action) ?? throw new ESLIFException($"{context.action} is not supported.");
            // We let C# deal with variance
            try
            {
                methodInfo.Invoke(context.recognizerInterface, args);
            }
            catch (Exception e)
            {
                throw new ESLIFException($"{context.action} failure", e);
            }
        }

        private static @C2CSHARP_TYPE_SHORT@ marpaESLIFRecognizerEventCallback(IntPtr userDatavp, IntPtr marpaESLIFRecognizerp, IntPtr eventArrayp, @C2CSHARP_TYPE_SIZE_T@ eventArrayl, ref marpaESLIFShr.marpaESLIFValueResultBool_t marpaESLIFValueResultBoolp)
        {
            marpaESLIFRecognizerOptionContext context = GetContext(userDatavp);
            ESLIFEvent[] events;
            if (eventArrayp == IntPtr.Zero || eventArrayl <= 0)
            {
                events = new ESLIFEvent[0];
            }
            else
            {
                events = new ESLIFEvent[(int)eventArrayl];
                for (int i = 0; i < events.Length; i++)
                {
                    marpaESLIFShr.marpaESLIFEvent_t marpaESLIFEvent = (marpaESLIFShr.marpaESLIFEvent_t)Marshal.PtrToStructure(eventArrayp, typeof(marpaESLIFShr.marpaESLIFEvent_t));
                    ESLIFEventType eventType;
                    switch (marpaESLIFEvent.type)
                    {
                        case marpaESLIFShr.marpaESLIFEventType_t.MARPAESLIF_EVENTTYPE_NONE:
                            eventType = ESLIFEventType.NONE;
                            break;
                        case marpaESLIFShr.marpaESLIFEventType_t.MARPAESLIF_EVENTTYPE_COMPLETED:
                            eventType = ESLIFEventType.COMPLETED;
                            break;
                        case marpaESLIFShr.marpaESLIFEventType_t.MARPAESLIF_EVENTTYPE_NULLED:
                            eventType = ESLIFEventType.NULLED;
                            break;
                        case marpaESLIFShr.marpaESLIFEventType_t.MARPAESLIF_EVENTTYPE_PREDICTED:
                            eventType = ESLIFEventType.PREDICTED;
                            break;
                        case marpaESLIFShr.marpaESLIFEventType_t.MARPAESLIF_EVENTTYPE_BEFORE:
                            eventType = ESLIFEventType.BEFORE;
                            break;
                        case marpaESLIFShr.marpaESLIFEventType_t.MARPAESLIF_EVENTTYPE_AFTER:
                            eventType = ESLIFEventType.AFTER;
                            break;
                        case marpaESLIFShr.marpaESLIFEventType_t.MARPAESLIF_EVENTTYPE_EXHAUSTED:
                            eventType = ESLIFEventType.EXHAUSTED;
                            break;
                        case marpaESLIFShr.marpaESLIFEventType_t.MARPAESLIF_EVENTTYPE_DISCARD:
                            eventType = ESLIFEventType.DISCARD;
                            break;
                        default:
                            throw new ESLIFException($"Unsupported event type {(int) marpaESLIFEvent.type}");
                    }
                    string symbol = marpaESLIFEvent.symbols != IntPtr.Zero ? Marshal.PtrToStringAnsi(marpaESLIFEvent.symbols) : null;
                    string @event = marpaESLIFEvent.events != IntPtr.Zero ? Marshal.PtrToStringAnsi(marpaESLIFEvent.events) : null;
                    events[i] = new ESLIFEvent(eventType, symbol, @event);
                    eventArrayp += Marshal.SizeOf(marpaESLIFEvent);
                }
            }

            EventCallback(context, new object[] { events });

            return 1;
        }

        private static marpaESLIFShr.marpaESLIFRecognizerEventCallback_t EventActionResolver(IntPtr userDatavp, IntPtr marpaESLIFRecognizerp, IntPtr actions)
        {
            GetContext(userDatavp).action = Marshal.PtrToStringAnsi(actions);

            return marpaESLIFRecognizerEventCallback;
        }

        private static bool IfCallback(marpaESLIFRecognizerOptionContext context, object[] args)
        {
            // We do not support the same method with multiple definitions
            MethodInfo methodInfo = context.recognizerInterface.GetType().GetMethod(context.action) ?? throw new ESLIFException($"{context.action} is not supported.");
            // We let C# deal with variance
            bool actionResult;
            try
            {
                actionResult = Convert.ToBoolean(methodInfo.Invoke(context.recognizerInterface, args));
            }
            catch (Exception e)
            {
                throw new ESLIFException($"{context.action} failure", e);
            }

            return actionResult;
        }

        private static @C2CSHARP_TYPE_SHORT@ marpaESLIFRecognizerIfCallback(IntPtr userDatavp, IntPtr marpaESLIFRecognizerp, IntPtr marpaESLIFValueResultp, ref marpaESLIFShr.marpaESLIFValueResultBool_t marpaESLIFValueResultBoolp)
        {
            marpaESLIFRecognizerOptionContext context = GetContext(userDatavp);
            object input = GetObject(context.stack, marpaESLIFRecognizerp, marpaESLIFValueResultp);
            bool actionResult = IfCallback(context, new object[] { input });

            marpaESLIFValueResultBoolp = actionResult ? marpaESLIFShr.marpaESLIFValueResultBool_t.MARPAESLIFVALUERESULTBOOL_TRUE : marpaESLIFShr.marpaESLIFValueResultBool_t.MARPAESLIFVALUERESULTBOOL_FALSE;

            return 1;
        }

        private static marpaESLIFShr.marpaESLIFRecognizerIfCallback_t IfActionResolver(IntPtr userDatavp, IntPtr marpaESLIFRecognizerp, IntPtr actions)
        {
            GetContext(userDatavp).action = Marshal.PtrToStringAnsi(actions);

            return marpaESLIFRecognizerIfCallback;
        }

        private static void DisposeCallback(IntPtr userDatavp, IntPtr inputcp, @C2CSHARP_TYPE_SIZE_T@ inputl, @C2CSHARP_TYPE_SHORT@ eofb, @C2CSHARP_TYPE_SHORT@ characterStreamb, IntPtr encodings, @C2CSHARP_TYPE_SIZE_T@ encodingl)
        {
            if (inputcp != IntPtr.Zero)
            {
                Marshal.FreeHGlobal(inputcp);
            }
            if (encodings != IntPtr.Zero)
            {
                Marshal.FreeHGlobal(encodings);
            }
        }

        private static short ReaderCallback(IntPtr userDatavp, ref IntPtr inputcpp, ref @C2CSHARP_TYPE_SIZE_T@ inputlp, ref short eofbp, ref short characterStreambp, ref IntPtr encodingsp, ref @C2CSHARP_TYPE_SIZE_T@ encodinglp, ref marpaESLIFShr.marpaESLIFReaderDispose_t disposeCallbackpp)
        {
            marpaESLIFRecognizerOptionContext context = GetContext(userDatavp);
            ESLIFRecognizerInterface recognizerInterface = context.recognizerInterface;
            if (! recognizerInterface.Read())
            {
                return 0;
            }

            disposeCallbackpp = DisposeCallback;
            byte[] data = recognizerInterface.Data();
            if (data.Length > 0)
            {
                inputcpp = Marshal.AllocHGlobal(data.Length * sizeof(byte));
                Marshal.Copy(data, 0, inputcpp, data.Length);
                inputlp = (@C2CSHARP_TYPE_SIZE_T@) data.Length;
            }
            else
            {
                inputcpp = IntPtr.Zero;
            }

            eofbp = (@C2CSHARP_TYPE_SHORT@)(recognizerInterface.IsEof() ? 1 : 0);
            characterStreambp = (@C2CSHARP_TYPE_SHORT@)(recognizerInterface.IsCharacterStream() ? 1 : 0);

            string encoding = recognizerInterface.Encoding();
            if (!string.IsNullOrWhiteSpace(encoding))
            {
                byte[] ascii = Encoding.ASCII.GetBytes(encoding);
                encodingsp = Marshal.AllocHGlobal(ascii.Length * sizeof(byte));
                Marshal.Copy(ascii, 0, encodingsp, ascii.Length);
                encodinglp = (@C2CSHARP_TYPE_SIZE_T@) ascii.Length;
            }
            else
            {
                encodingsp = IntPtr.Zero;
            }

            return 1;
        }

        private void DisposeUnmanagedResources()
        {
            if (this.userDatavp != IntPtr.Zero)
            {
                this.contextHandle.Free();
            }

            if (this.marpaESLIFRecognizerOptionp != IntPtr.Zero)
            {
                Marshal.FreeHGlobal(this.marpaESLIFRecognizerOptionp);
                this.marpaESLIFRecognizerOptionp = IntPtr.Zero;
            }
        }

        protected virtual void Dispose(bool disposing)
        {
            if (!disposedValue)
            {
                if (disposing)
                {
                    // DONE: dispose managed state (managed objects)
                }

                // DONE: free unmanaged resources (unmanaged objects) and override finalizer
                this.DisposeUnmanagedResources();
                // DONE: set large fields to null
                disposedValue = true;
            }
        }

        // DONE: override finalizer only if 'Dispose(bool disposing)' has code to free unmanaged resources
        ~marpaESLIFRecognizerOption()
        {
            // Do not change this code. Put cleanup code in 'Dispose(bool disposing)' method
            Dispose(disposing: false);
        }

        public void Dispose()
        {
            // Do not change this code. Put cleanup code in 'Dispose(bool disposing)' method
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }
    }
}

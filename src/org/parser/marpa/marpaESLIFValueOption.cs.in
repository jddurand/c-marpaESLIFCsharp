#cmakedefine MARPAESLIF_HAVE_LONG_LONG
#cmakedefine C2CSHARP_TYPE_INT_IS_INT
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace org.parser.marpa
{
    public class marpaESLIFValueOption : IDisposable
    {
        public IntPtr marpaESLIFValueOptionp { get; protected set; }
        public marpaESLIFValueOptionContext context { get; protected set; }
        private readonly marpaESLIFShr.marpaESLIFValueOption_t marpaESLIFValueOption_t;
        private readonly ESLIFValueInterface valueInterface;
        private readonly GCHandle contextHandle;
        private readonly IntPtr userDatavp;
        private bool disposedValue;

        public class marpaESLIFValueOptionContext
        {
            public ESLIFValueInterface valueInterface;
            public Stack<object> stack = new Stack<object>();
            public Func<List<object>, object> ruleAction = null;
            public Func<object, object> symbolAction = null;

            public marpaESLIFValueOptionContext(ESLIFValueInterface valueInterface)
            {
                this.valueInterface = valueInterface ?? throw new ArgumentNullException(nameof(valueInterface));
            }
        }

        public marpaESLIFValueOption(ESLIFValueInterface valueInterface)
        {
            this.valueInterface = valueInterface ?? throw new ArgumentNullException(nameof(valueInterface));

            this.context = new marpaESLIFValueOptionContext(valueInterface);
            this.contextHandle = GCHandle.Alloc(context, GCHandleType.Normal);
            this.userDatavp = GCHandle.ToIntPtr(this.contextHandle);

            this.marpaESLIFValueOption_t = new marpaESLIFShr.marpaESLIFValueOption_t();
            this.marpaESLIFValueOption_t.userDatavp = userDatavp;
            this.marpaESLIFValueOption_t.ruleActionResolverp = RuleActionResolver;
            this.marpaESLIFValueOption_t.symbolActionResolverp = SymbolActionResolver;
            this.marpaESLIFValueOption_t.importerp = Importer;
            this.marpaESLIFValueOption_t.highRankOnlyb = (@C2CSHARP_TYPE_SHORT@) (this.valueInterface.IsWithHighRankOnly() ? 1 : 0);
            this.marpaESLIFValueOption_t.orderByRankb = (@C2CSHARP_TYPE_SHORT@) (this.valueInterface.IsWithOrderByRank() ? 1 : 0);
            this.marpaESLIFValueOption_t.ambiguousb = (@C2CSHARP_TYPE_SHORT@) (this.valueInterface.IsWithAmbiguous() ? 1 : 0);
            this.marpaESLIFValueOption_t.nullb = (@C2CSHARP_TYPE_SHORT@) (this.valueInterface.IsWithNull() ? 1 : 0);
            this.marpaESLIFValueOption_t.maxParsesi = (@C2CSHARP_TYPE_INT@) this.valueInterface.MaxParses();

            this.marpaESLIFValueOptionp = Marshal.AllocHGlobal(Marshal.SizeOf(this.marpaESLIFValueOption_t));
            Marshal.StructureToPtr(marpaESLIFValueOption_t, this.marpaESLIFValueOptionp, false);
        }

        private static @C2CSHARP_TYPE_SHORT@ Importer(IntPtr marpaESLIFValuep, IntPtr userDatavp, IntPtr marpaESLIFValueResultp, short haveUndefb)
        {
            GCHandle contextHandle = GCHandle.FromIntPtr(userDatavp);
            marpaESLIFValueOptionContext context = (marpaESLIFValueOptionContext)contextHandle.Target;
            if (context == null)
            {
                throw new ESLIFException("context is null");
            }

            ImportExport.Instance.Importer(context.stack, marpaESLIFValueResultp);

            return 1;
        }

        private static object GetObject(Stack<object> stack, IntPtr marpaESLIFValuep, int argi)
        {
            IntPtr marpaESLIFValueResultp = marpaESLIFShr.marpaESLIFValue_stack_getp(marpaESLIFValuep, argi);

            if (marpaESLIFShr.marpaESLIFValue_importb(marpaESLIFValuep, marpaESLIFValueResultp) == 0)
            {
                throw new ESLIFException("marpaESLIFValue_importb failure");
            }
            if (stack.Count != 1)
            {
                throw new ESLIFException($"Internal value stack is {stack.Count} instead of 1");
            }

            return stack.Pop();
        }

        private static object GetObject(Stack<object> stack, IntPtr marpaESLIFValuep, IntPtr marpaESLIFValueResultp)
        {
            if (marpaESLIFShr.marpaESLIFValue_importb(marpaESLIFValuep, marpaESLIFValueResultp) == 0)
            {
                throw new ESLIFException("marpaESLIFValue_importb failure");
            }
            if (stack.Count != 1)
            {
                throw new ESLIFException($"Internal value stack is {stack.Count} instead of 1");
            }

            return stack.Pop();
        }

        private static @C2CSHARP_TYPE_SHORT@ RuleCallback(IntPtr userDatavp, IntPtr marpaESLIFValuep, @C2CSHARP_TYPE_INT@ arg0i, @C2CSHARP_TYPE_INT@ argni, @C2CSHARP_TYPE_INT@ resulti, @C2CSHARP_TYPE_SHORT@ nullableb)
        {
            GCHandle contextHandle = GCHandle.FromIntPtr(userDatavp);
            marpaESLIFValueOptionContext context = (marpaESLIFValueOptionContext)contextHandle.Target;
            if (context == null)
            {
                throw new ESLIFException("context is null");
            }

            List<object> args;
            if (nullableb != 0)
            {
                args = null;
            }
            else
            {
                args = new List<object>();
                for (@C2CSHARP_TYPE_INT@ argi = arg0i; argi <= argni; argi++)
                {
                    args.Add(GetObject(context.stack, marpaESLIFValuep, argi));
                }
            }

            object actionResult = context.ruleAction(args);

            IntPtr marpaESLIFValueResultp = ImportExport.Instance.Exporter(actionResult);
            @C2CSHARP_TYPE_SHORT@ output = marpaESLIFShr.marpaESLIFValue_stack_setb(marpaESLIFValuep, resulti, marpaESLIFValueResultp);
            if (output == 0)
            {
                marpaESLIFShr.marpaESLIFValue_marpaESLIFValueResult_freeb(marpaESLIFValuep, marpaESLIFValueResultp, (@C2CSHARP_TYPE_SHORT@) 1);
                return 0;
            }

            // Just deallocate it
            Marshal.FreeHGlobal(marpaESLIFValueResultp);
            return 1;
        }

        private static void CheckRuleActionExists(IntPtr userDatavp, IntPtr marpaESLIFValuep, IntPtr actions)
        {
            GCHandle contextHandle = GCHandle.FromIntPtr(userDatavp);
            marpaESLIFValueOptionContext context = (marpaESLIFValueOptionContext)contextHandle.Target;
            if (context == null)
            {
                throw new ESLIFException("context is null");
            }

            string action = Marshal.PtrToStringAnsi(actions);
            if (!context.valueInterface.RuleActions().TryGetValue(action, out context.ruleAction))
            {
                throw new ESLIFException($"Unimplemented action {action}");
            }

        }

        private static marpaESLIFShr.marpaESLIFValueRuleCallback_t RuleActionResolver(IntPtr userDatavp, IntPtr marpaESLIFValuep, IntPtr actions)
        {
            CheckRuleActionExists(userDatavp, marpaESLIFValuep, actions);
            return RuleCallback;
        }

        private static @C2CSHARP_TYPE_SHORT@ SymbolCallback(IntPtr userDatavp, IntPtr marpaESLIFValuep, IntPtr marpaESLIFValueResultp, @C2CSHARP_TYPE_INT@ resulti)
        {
            GCHandle contextHandle = GCHandle.FromIntPtr(userDatavp);
            marpaESLIFValueOptionContext context = (marpaESLIFValueOptionContext)contextHandle.Target;
            if (context == null)
            {
                throw new ESLIFException("context is null");
            }

            object arg = GetObject(context.stack, marpaESLIFValuep, marpaESLIFValueResultp);

            object actionResult = context.symbolAction(arg);

            marpaESLIFValueResultp = ImportExport.Instance.Exporter(actionResult);
            @C2CSHARP_TYPE_SHORT@ output = marpaESLIFShr.marpaESLIFValue_stack_setb(marpaESLIFValuep, resulti, marpaESLIFValueResultp);
            if (output == 0)
            {
                marpaESLIFShr.marpaESLIFValue_marpaESLIFValueResult_freeb(marpaESLIFValuep, marpaESLIFValueResultp, (@C2CSHARP_TYPE_SHORT@) 1);
                return 0;
            }

            // Just deallocate it
            Marshal.FreeHGlobal(marpaESLIFValueResultp);
            return 1;
        }

        private static void CheckSymbolActionExists(IntPtr userDatavp, IntPtr marpaESLIFValuep, IntPtr actions)
        {
            GCHandle contextHandle = GCHandle.FromIntPtr(userDatavp);
            marpaESLIFValueOptionContext context = (marpaESLIFValueOptionContext)contextHandle.Target;
            if (context == null)
            {
                throw new ESLIFException("context is null");
            }

            string action = Marshal.PtrToStringAnsi(actions);
            if (!context.valueInterface.SymbolActions().TryGetValue(action, out context.symbolAction))
            {
                throw new ESLIFException($"Unimplemented action {action}");
            }

        }

        private static marpaESLIFShr.marpaESLIFValueSymbolCallback_t SymbolActionResolver(IntPtr userDatavp, IntPtr marpaESLIFValuep, IntPtr actions)
        {
            CheckSymbolActionExists(userDatavp, marpaESLIFValuep, actions);
            return SymbolCallback;
        }

        private void DisposeUnmanagedResources()
        {
            if (this.userDatavp != IntPtr.Zero)
            {
                this.contextHandle.Free();
            }

            if (this.marpaESLIFValueOptionp != IntPtr.Zero)
            {
                Marshal.FreeHGlobal(this.marpaESLIFValueOptionp);
                this.marpaESLIFValueOptionp = IntPtr.Zero;
            }
        }

        protected virtual void Dispose(bool disposing)
        {
            if (!disposedValue)
            {
                if (disposing)
                {
                    // DONE: dispose managed state (managed objects)
                }

                // DONE: free unmanaged resources (unmanaged objects) and override finalizer
                this.DisposeUnmanagedResources();
                // DONE: set large fields to null
                disposedValue = true;
            }
        }

        // DONE: override finalizer only if 'Dispose(bool disposing)' has code to free unmanaged resources
        ~marpaESLIFValueOption()
        {
            // Do not change this code. Put cleanup code in 'Dispose(bool disposing)' method
            Dispose(disposing: false);
        }

        public void Dispose()
        {
            // Do not change this code. Put cleanup code in 'Dispose(bool disposing)' method
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }
    }
}

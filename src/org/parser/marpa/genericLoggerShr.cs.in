using System;
using System.Runtime.InteropServices;

namespace org.parser.marpa
{
    public class genericLoggerShr
    {
#region Thin_Interface
        public enum genericLoggerLevel_t : @C2CSHARP_TYPE_ENUM@
        {
            GENERICLOGGER_LOGLEVEL_TRACE = 0,
            GENERICLOGGER_LOGLEVEL_DEBUG,
            GENERICLOGGER_LOGLEVEL_INFO,
            GENERICLOGGER_LOGLEVEL_NOTICE,
            GENERICLOGGER_LOGLEVEL_WARNING,
            GENERICLOGGER_LOGLEVEL_ERROR,
            GENERICLOGGER_LOGLEVEL_CRITICAL,
            GENERICLOGGER_LOGLEVEL_ALERT,
            GENERICLOGGER_LOGLEVEL_EMERGENCY
        }

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void genericLoggerCallback_t(IntPtr userDatavp, genericLoggerLevel_t logLeveli, [MarshalAs(UnmanagedType.LPStr)] string msgs);

        [DllImport("genericLogger.dll", CallingConvention = CallingConvention.Cdecl)]
        [return: MarshalAs(UnmanagedType.LPStr)]
        // It return a static string, no need to free it in unmanaged code
        public static extern string genericLogger_versions();

        [DllImport("genericLogger.dll", CallingConvention = CallingConvention.Cdecl)]
        public static extern genericLoggerCallback_t genericLogger_defaultLogCallbackp();

        [DllImport("genericLogger.dll", CallingConvention = CallingConvention.Cdecl)]
        public static extern IntPtr genericLogger_userDatavp_setp(IntPtr genericLoggerp, IntPtr userDatavp);

        [DllImport("genericLogger.dll", CallingConvention = CallingConvention.Cdecl)]
        public static extern IntPtr genericLogger_userDatavp_getp(IntPtr genericLoggerp);

        [DllImport("genericLogger.dll", CallingConvention = CallingConvention.Cdecl)]
        public static extern genericLoggerLevel_t genericLogger_logLevel_seti(IntPtr genericLoggerp, genericLoggerLevel_t logLeveli);

        [DllImport("genericLogger.dll", CallingConvention = CallingConvention.Cdecl)]
        public static extern genericLoggerLevel_t genericLogger_logLevel_geti(IntPtr genericLoggerp);

        [DllImport("genericLogger.dll", CallingConvention = CallingConvention.Cdecl)]
        public static extern IntPtr genericLogger_newp(genericLoggerCallback_t logCallbackp, IntPtr userDatavp, genericLoggerLevel_t genericLoggerLeveli);

        [DllImport("genericLogger.dll", CallingConvention = CallingConvention.Cdecl)]
        public static extern IntPtr genericLogger_clonep(IntPtr genericLoggerp);

        [DllImport("genericLogger.dll", CallingConvention = CallingConvention.Cdecl)]
        public static extern void genericLogger_freev(ref IntPtr genericLoggerpp);

        // __arglist voluntarilly skipped to a single member
        [DllImport("genericLogger.dll", CallingConvention = CallingConvention.Cdecl)]
        public static extern void genericLogger_logv(IntPtr genericLoggerp, genericLoggerLevel_t genericLoggerLeveli, [MarshalAs(UnmanagedType.LPStr)] string fmts, [MarshalAs(UnmanagedType.LPStr)] string msgs);

        // Voluntarily skipped
        // [DllImport("genericLogger.dll")]
        // void genericLogger_logapv(genericLogger_t* genericLoggerp, genericLoggerLevel_t genericLoggerLeveli, const char* fmts, va_list ap);

#endregion Thin_Interface

#region Thin_Interface_Mapping_To_External_Interface


#endregion Thin_Interface_Mapping_To_External_Interface
    }
}

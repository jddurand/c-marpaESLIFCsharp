using Microsoft.Extensions.Logging;
using System;
using System.Runtime.InteropServices;

namespace org.parser.marpa
{
    public class genericLoggerShr
    {
        public enum genericLoggerLevel_t : @C2CSHARP_TYPE_ENUM@
        {
            GENERICLOGGER_LOGLEVEL_TRACE = 0,
            GENERICLOGGER_LOGLEVEL_DEBUG,
            GENERICLOGGER_LOGLEVEL_INFO,
            GENERICLOGGER_LOGLEVEL_NOTICE,
            GENERICLOGGER_LOGLEVEL_WARNING,
            GENERICLOGGER_LOGLEVEL_ERROR,
            GENERICLOGGER_LOGLEVEL_CRITICAL,
            GENERICLOGGER_LOGLEVEL_ALERT,
            GENERICLOGGER_LOGLEVEL_EMERGENCY
        }
    
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void genericLoggerCallback_t(IntPtr userDatavp, genericLoggerLevel_t logLeveli, IntPtr msgs);
    
        [DllImport("genericLogger.dll", CallingConvention = CallingConvention.Cdecl)]
        [return: MarshalAs(UnmanagedType.LPStr)]
        // It return a static string, no need to free it in unmanaged code
        public static extern string genericLogger_versions();
    
        [DllImport("genericLogger.dll", CallingConvention = CallingConvention.Cdecl)]
        public static extern genericLoggerCallback_t genericLogger_defaultLogCallbackp();
    
        [DllImport("genericLogger.dll", CallingConvention = CallingConvention.Cdecl)]
        public static extern IntPtr genericLogger_userDatavp_setp(IntPtr genericLoggerp, IntPtr userDatavp);
    
        [DllImport("genericLogger.dll", CallingConvention = CallingConvention.Cdecl)]
        public static extern IntPtr genericLogger_userDatavp_getp(IntPtr genericLoggerp);
    
        [DllImport("genericLogger.dll", CallingConvention = CallingConvention.Cdecl)]
        public static extern genericLoggerLevel_t genericLogger_logLevel_seti(IntPtr genericLoggerp, genericLoggerLevel_t logLeveli);
    
        [DllImport("genericLogger.dll", CallingConvention = CallingConvention.Cdecl)]
        public static extern genericLoggerLevel_t genericLogger_logLevel_geti(IntPtr genericLoggerp);
    
        [DllImport("genericLogger.dll", CallingConvention = CallingConvention.Cdecl)]
        public static extern IntPtr genericLogger_newp(genericLoggerCallback_t logCallbackp, IntPtr userDatavp, genericLoggerLevel_t genericLoggerLeveli);
    
        [DllImport("genericLogger.dll", CallingConvention = CallingConvention.Cdecl)]
        public static extern IntPtr genericLogger_clonep(IntPtr genericLoggerp);
    
        [DllImport("genericLogger.dll", CallingConvention = CallingConvention.Cdecl)]
        public static extern void genericLogger_freev(ref IntPtr genericLoggerpp);
    
        // __arglist voluntarilly skipped to a single member
        [DllImport("genericLogger.dll", CallingConvention = CallingConvention.Cdecl)]
        public static extern void genericLogger_logv(IntPtr genericLoggerp, genericLoggerLevel_t genericLoggerLeveli, [MarshalAs(UnmanagedType.LPStr)] string fmts, [MarshalAs(UnmanagedType.LPStr)] string msgs);
    
        // Voluntarily skipped
        // [DllImport("genericLogger.dll")]
        // void genericLogger_logapv(genericLogger_t* genericLoggerp, genericLoggerLevel_t genericLoggerLeveli, const char* fmts, va_list ap);
    }

    public class genericLogger : IDisposable
    {
        public IntPtr genericLoggerp { get; protected set; }
        private readonly genericLoggerShr.genericLoggerCallback_t genericLoggerCallback;
        private readonly GCHandle loggerHandle;
        private readonly IntPtr userDatavp;
        private bool disposedValue;

        public genericLogger(ILogger logger = null)
        {
            // Callback context is a handle to the logger
            if (logger != null)
            {
                this.loggerHandle = GCHandle.Alloc(logger, GCHandleType.Normal);
                this.genericLoggerCallback = Callback;
                this.userDatavp = GCHandle.ToIntPtr(this.loggerHandle);
            }
            else
            {
                this.genericLoggerCallback = null;
                this.userDatavp = IntPtr.Zero;
            }

            // Log level is driven by logger, so we put GENERICLOGGER_LOGLEVEL_TRACE to filter nothing
            this.genericLoggerp = genericLoggerShr.genericLogger_newp(this.genericLoggerCallback, this.userDatavp, genericLoggerShr.genericLoggerLevel_t.GENERICLOGGER_LOGLEVEL_TRACE);

            if (this.genericLoggerp == IntPtr.Zero)
            {
                this.DisposeUnmanagedResources();
                throw new ESLIFException("genericLogger_newp failure");
            }
        }

        private static void Callback(IntPtr userDatavp, genericLoggerShr.genericLoggerLevel_t logLeveli, IntPtr msgs)
        {
            if (userDatavp == IntPtr.Zero || msgs == IntPtr.Zero)
            {
                return;
            }

            GCHandle loggerHandlePtr = GCHandle.FromIntPtr(userDatavp);
            ILogger logger = (ILogger)loggerHandlePtr.Target;
            if (logger == null)
            {
                return;
            }

            string message = Marshal.PtrToStringAnsi(msgs);
            switch (logLeveli)
            {
                case genericLoggerShr.genericLoggerLevel_t.GENERICLOGGER_LOGLEVEL_TRACE:
                    logger.LogTrace(message);
                    break;
                case genericLoggerShr.genericLoggerLevel_t.GENERICLOGGER_LOGLEVEL_DEBUG:
                    logger.LogDebug(message);
                    break;
                case genericLoggerShr.genericLoggerLevel_t.GENERICLOGGER_LOGLEVEL_INFO:
                    logger.LogInformation(message);
                    break;
                case genericLoggerShr.genericLoggerLevel_t.GENERICLOGGER_LOGLEVEL_NOTICE:
                    logger.LogInformation(message);
                    break;
                case genericLoggerShr.genericLoggerLevel_t.GENERICLOGGER_LOGLEVEL_WARNING:
                    logger.LogWarning(message);
                    break;
                case genericLoggerShr.genericLoggerLevel_t.GENERICLOGGER_LOGLEVEL_ALERT:
                    logger.LogWarning(message);
                    break;
                case genericLoggerShr.genericLoggerLevel_t.GENERICLOGGER_LOGLEVEL_EMERGENCY:
                    logger.LogWarning(message);
                    break;
                case genericLoggerShr.genericLoggerLevel_t.GENERICLOGGER_LOGLEVEL_ERROR:
                    logger.LogError(message);
                    break;
                case genericLoggerShr.genericLoggerLevel_t.GENERICLOGGER_LOGLEVEL_CRITICAL:
                    logger.LogCritical(message);
                    break;
            }
        }

        private void DisposeUnmanagedResources()
        {
            if (this.genericLoggerp != IntPtr.Zero)
            {
                IntPtr genericLoggerp = this.genericLoggerp;
                genericLoggerShr.genericLogger_freev(ref genericLoggerp);
                this.genericLoggerp = genericLoggerp;
            }

            if (this.userDatavp != IntPtr.Zero)
            {
                this.loggerHandle.Free();
            }
        }

        public string Version()
        {
            return genericLoggerShr.genericLogger_versions();
        }

        protected virtual void Dispose(bool disposing)
        {
            if (!disposedValue)
            {
                if (disposing)
                {
                    // DONE: dispose managed state (managed objects)
                }

                // DONE: free unmanaged resources (unmanaged objects) and override finalizer
                this.DisposeUnmanagedResources();
                // DONE: set large fields to null
                disposedValue = true;
            }
        }

        // DONE: override finalizer only if 'Dispose(bool disposing)' has code to free unmanaged resources
        ~genericLogger()
        {
            // Do not change this code. Put cleanup code in 'Dispose(bool disposing)' method
            Dispose(disposing: false);
        }

        public void Dispose()
        {
            // Do not change this code. Put cleanup code in 'Dispose(bool disposing)' method
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }
    }
}
